
function timezones_list(){

	return _timezones_list;
}


//
// technique based on this article:
// http://blog.redfin.com/devblog/2007/08/getting_the_time_zone_from_a_web_browser.html
//

function timezones_guess(){

	var api_guess = _timezones_try_using_api();
	if (api_guess){
		// is this one of our choices?
		for (var i in _timezones_map){
			if (_timezones_map[i] == api_guess){
				return api_guess;
			}
		}
		// does it map directly to one of our choices?
		if (_timezones_alternative[api_guess]){
			return _timezones_alternative[api_guess];
		}
	}

	// use auto-detection via probe dates
	var key = _timezones_build_probe_key();
	if (_timezones_map[key]){
		return _timezones_map[key];
	}

	//console.log('no match for TZ on key '+key);

	return (arguments.length > 0) ? arguments[0] : 'America/Los_Angeles';
}

var _timezones_try_using_api = function(){
	try {
		if (typeof Intl === "undefined" || typeof Intl.DateTimeFormat === "undefined"){
			return;
		}

		var format = Intl.DateTimeFormat();

		if (typeof format === "undefined" || typeof format.resolvedOptions === "undefined"){
			return;
		}

		// Sometimes the API can return an abbreviation. Since we know how to convert most
		// abbreviations, just return it and let the caller convert or ignore.
		return format.resolvedOptions().timeZone;

	}catch (e){
		return;
	}
};

var _timezones_build_probe_key = function(){

	var key_parts = [];
#DATES#
	var key = key_parts.join(':');

	return key;
}


var _timezones_map = #MAP#;

var _timezones_list = #LIST#;

var _timezones_alternative = #EXACT#;

#BROKEN#
